{
	"info": {
		"_postman_id": "0e3f5296-7275-406b-9d82-db45bbacbc81",
		"name": "EconoVista",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "27669191"
	},
	"item": [
		{
			"name": "Principales Variables",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"El código de estado de la respuesta es 200\", function () {\r",
							"  pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"El tiempo de respuesta es menor a 200ms\", function () {\r",
							"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"La respuesta tiene los campos requeridos\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"\r",
							"    pm.expect(responseData).to.be.an('array');\r",
							"    responseData.forEach(function(item) {\r",
							"        pm.expect(item).to.have.property('idVariable');\r",
							"        pm.expect(item).to.have.property('nombreCorto');\r",
							"        pm.expect(item).to.have.property('nombreLargo');\r",
							"        pm.expect(item).to.have.property('descripcion');\r",
							"        pm.expect(item).to.have.property('fecha');\r",
							"        pm.expect(item).to.have.property('valor');\r",
							"    });\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"La fecha está en un formato de fecha válido\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"\r",
							"    responseData.forEach(function(item) {\r",
							"        pm.expect(item.fecha).to.match(/^\\d{4}-\\d{2}-\\d{2}$/);\r",
							"    });\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "127.0.0.1:8010/proxy/principalesvariables",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "8010",
					"path": [
						"proxy",
						"principalesvariables"
					]
				}
			},
			"response": []
		},
		{
			"name": "Datos de una Variable",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// Ejecutar con el runner para probar todos los ID's (con 12 iteraciones)\r",
							"\r",
							"// Array de IDs que se quieren probar\r",
							"let ids = [1, 4, 5, 6, 27, 29, 30, 101, 102, 103, 104, 105];\r",
							"\r",
							"// Variable para controlar la iteración\r",
							"let index = pm.environment.get(\"index\") || 0;\r",
							"\r",
							"// Setear el ID actual\r",
							"pm.environment.set(\"id_variable\", ids[index]);\r",
							"\r",
							"// Incrementar el índice para la siguiente solicitud\r",
							"index++;\r",
							"pm.environment.set(\"index\", index);\r",
							"\r",
							"// Si ya no quedan más IDs, resetea el índice\r",
							"if (index >= ids.length) {\r",
							"    pm.environment.set(\"index\", 0);\r",
							"}"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"El código de estado de la respuesta es 200\", function () {\r",
							"  pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"El tiempo de respuesta es menor a 200ms\", function () {\r",
							"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"La respuesta tiene los campos requeridos - fecha y valor\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('array');\r",
							"    responseData.forEach(function(data) {\r",
							"        pm.expect(data.fecha).to.exist;\r",
							"        pm.expect(data.valor).to.exist;\r",
							"    });\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"La fecha está en un formato de fecha válido\", function () {\r",
							"  const responseData = pm.response.json();\r",
							"  \r",
							"  responseData.forEach(function(item) {\r",
							"    pm.expect(item.fecha).to.match(/^\\d{4}-\\d{2}-\\d{2}$/);\r",
							"  });\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"El valor es un entero no negativo\", function () {\r",
							"    // Solo la inflación mensual puede ser negativa\r",
							"    if (pm.variables.get(\"id_variable\") !== 27) {\r",
							"        const responseData = pm.response.json();\r",
							"\r",
							"        pm.expect(responseData).to.be.an('array');\r",
							"\r",
							"        responseData.forEach(function(data) {\r",
							"            \r",
							"            pm.expect(data.valor).to.be.a('number').and.to.satisfy((val) => val >= 0, \"El valor debe ser un entero no negativo\");\r",
							"            \r",
							"        });\r",
							"    }\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"La cabecera Content-Type es application/json\", function () {\r",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "127.0.0.1:8010/proxy/datosvariable/{{id_variable}}",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "8010",
					"path": [
						"proxy",
						"datosvariable",
						"{{id_variable}}"
					]
				},
				"description": "# Obtener datos de variable\n\nEsta solicitud realiza una solicitud GET a la URL base 127.0.0.1:8010/proxy/datosvariable/{{id_variable}} para obtener los datos de una variable específica.\n\n### Parámetros de solicitud\n\n- `id_variable` (ruta): El ID de la variable para la cual se desean obtener los datos.\n    \n\n### Respuesta\n\nLa solicitud devuelve un código de estado 200 y el tipo de contenido es \"application/json\". El cuerpo de la respuesta es una matriz de objetos JSON que contiene las propiedades \"fecha\" y \"valor\", donde \"fecha\" representa la fecha de los datos y \"valor\" representa el valor correspondiente.\n\nEjemplo de respuesta:\n\n``` json\n[\n    {\"fecha\":\"\",\"valor\":0}\n]\n\n ```\n\nEste endpoint realiza una solicitud GET para obtener los datos de una variable específica.\n\n### Parámetros de la Solicitud\n\n- `id_variable` (ruta): El ID de la variable para la cual se desean obtener los datos.\n    \n\n### Respuesta\n\nLa solicitud devuelve un código de estado 200 y un cuerpo de respuesta en formato JSON que contiene un array de objetos con las siguientes propiedades:\n\n- `fecha`: La fecha asociada al dato de la variable.\n    \n- `valor`: El valor correspondiente a la variable en la fecha especificada.\n    \n\nEl cuerpo de respuesta puede contener múltiples objetos, cada uno representando un conjunto de datos de la variable.\n\nEl tipo de contenido de la respuesta es `application/json`."
			},
			"response": []
		},
		{
			"name": "Ajuste CER",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// Ejecutar con el runner para probar todos los ID's (con 6 iteraciones)\r",
							"\r",
							"// Array de IDs que se quieren probar\r",
							"let ids = [4, 5, 102, 103, 104, 105];\r",
							"\r",
							"// Variable para controlar la iteración\r",
							"let index = pm.environment.get(\"index\") || 0;\r",
							"\r",
							"// Setear el ID actual\r",
							"pm.environment.set(\"id_variable\", ids[index]);\r",
							"\r",
							"// Incrementar el índice para la siguiente solicitud\r",
							"index++;\r",
							"pm.environment.set(\"index\", index);\r",
							"\r",
							"// Si ya no quedan más IDs, resetea el índice\r",
							"if (index >= ids.length) {\r",
							"    pm.environment.set(\"index\", 0);\r",
							"}"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"El código de estado de la respuesta es 200\", function () {\r",
							"    pm.expect(pm.response.code).to.equal(200);\r",
							"});\r",
							"\r",
							"pm.test(\"La respuesta tiene el encabezado Content-Type correcto establecido en application/json\", function () {\r",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
							"});\r",
							"\r",
							"pm.test(\"El tiempo de respuesta es inferior a 200ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
							"});\r",
							"\r",
							"pm.test(\"El esquema de respuesta incluye los campos requeridos - fecha y valor\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('array');\r",
							"    responseData.forEach(function(item) {\r",
							"        pm.expect(item).to.have.property('fecha');\r",
							"        pm.expect(item).to.have.property('valor');\r",
							"    });\r",
							"});\r",
							"\r",
							"pm.test(\"La fecha está en un formato de fecha válido\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    responseData.forEach(function(item) {\r",
							"        pm.expect(item.fecha).to.match(/^\\d{4}-\\d{2}-\\d{2}$/);\r",
							"    });\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "127.0.0.1:8010/proxy/ajusteCER/{{id_variable}}",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "8010",
					"path": [
						"proxy",
						"ajusteCER",
						"{{id_variable}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Datos de una Variable entre fechas",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"El código de estado de la respuesta es 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"La respuesta tiene los campos requeridos - fecha y valor\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    responseData.forEach(function(item) {\r",
							"        pm.expect(item).to.have.property('fecha');\r",
							"        pm.expect(item).to.have.property('valor');\r",
							"    });\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"La fecha está en un formato de fecha válido\", function () {\r",
							"  const responseData = pm.response.json();\r",
							"\r",
							"  responseData.forEach(function(data) {\r",
							"    pm.expect(data.fecha).to.match(/^\\d{4}-\\d{2}-\\d{2}$/);\r",
							"  });\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Las fechas de la respuesta están entre fecha_desde y fecha_hasta\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    const fechaDesde = Date.parse(pm.variables.get(\"fecha_desde\"));\r",
							"    const fechaHasta = Date.parse(pm.variables.get(\"fecha_hasta\"));\r",
							"\r",
							"    responseData.forEach(function(data) {\r",
							"        fechaParseada = Date.parse(data.fecha)\r",
							"        pm.expect(fechaParseada).to.be.at.least(fechaDesde).and.to.be.at.most(fechaHasta);\r",
							"    });\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"El valor es un entero no negativo\", function () {\r",
							"    // Solo la inflación mensual puede ser negativa\r",
							"    if (pm.variables.get(\"id_variable\") !== 27) {\r",
							"        const responseData = pm.response.json();\r",
							"\r",
							"        pm.expect(responseData).to.be.an('array');\r",
							"\r",
							"        responseData.forEach(function(data) {\r",
							"            \r",
							"            pm.expect(data.valor).to.be.a('number').and.to.satisfy((val) => val >= 0, \"El valor debe ser un entero no negativo\");\r",
							"            \r",
							"        });\r",
							"    }\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"El tiempo de respuesta es menor a 200ms\", function () {\r",
							"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// Ejecutar con el runner para probar todos los ID's (con 12 iteraciones)\r",
							"\r",
							"// Array de IDs que se quieren probar\r",
							"let ids = [1, 4, 5, 6, 27, 29, 30, 101, 102, 103, 104, 105];\r",
							"\r",
							"// Variable para controlar la iteración\r",
							"let index = pm.environment.get(\"index\") || 0;\r",
							"\r",
							"// Setear el ID actual\r",
							"pm.environment.set(\"id_variable\", ids[index]);\r",
							"\r",
							"// Incrementar el índice para la siguiente solicitud\r",
							"index++;\r",
							"pm.environment.set(\"index\", index);\r",
							"\r",
							"// Si ya no quedan más IDs, resetea el índice\r",
							"if (index >= ids.length) {\r",
							"    pm.environment.set(\"index\", 0);\r",
							"}"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "127.0.0.1:8010/proxy/datosvariable/{{id_variable}}/{{fecha_desde}}/{{fecha_hasta}}",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "8010",
					"path": [
						"proxy",
						"datosvariable",
						"{{id_variable}}",
						"{{fecha_desde}}",
						"{{fecha_hasta}}"
					]
				}
			},
			"response": []
		}
	]
}